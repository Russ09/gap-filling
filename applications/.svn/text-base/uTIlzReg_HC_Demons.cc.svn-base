/*=========================================================================
 
Author: Laurent Risser

Disclaimer: This software has been developed for research purposes only, and hence should 
not be used as a diagnostic tool. In no event shall the authors or distributors
be liable to any direct, indirect, special, incidental, or consequential 
damages arising of the use of this software, its documentation, or any 
derivatives thereof, even if the authors have been advised of the possibility 
of such damage. 
 
 =========================================================================*/


#include <HC_Demons.h>

void usage(){
  cerr << "Usage: uTIlzReg_Demons_plain [Moving] [Fixed] [FileRefVFX]\n";
  cerr << "Where::\n";
  cerr << "[Moving] [Fixed] are the registered images \n";
  cerr << "[FileRefVFX] is an ascii file which contains the name of the files [VFX1][VFY1][VFZ1] [VFX2][VFY2][VFZ2]...\n";
  cerr << " <options> are one or more of the following:\n";
  cerr << "  Primary options:\n";
  cerr << "    <-iterations n>        Number of iterations (default=20)\n";
  cerr << "    <-MI>                  Minimize the mutual information instead of the sum of squared differences\n";
  cerr << "    <-LASSO n>             LASSO regularisation on the VF coefficients. n controls the level of regularisation (around 1)\n";
  cerr << "  Inputs and Outputs:\n";
  cerr << "    <-PrefixInputs n>      Prefix of the files containing an initial velocity field (default=\"Null\")\n";
  cerr << "    <-PrefixOutputs n>     Prefix of the files containing the outputs (default=\"Outputs\")\n";
  cerr << "    <-affineT_txt n>       Affine transfo from fixed image to moving image in the world domain. The 4*4 matrix is an ascii file.\n";
  cerr << "    <-IniDispF n>          Init. disp. field from fixed to moving in the world domain. (n = DX.nii DY.nii DZ.nii)\n";
  cerr << "    <-Mask n>              File containing a mask. (default=\"Null\")\n";
  cerr << "  Secondary options:\n";
  cerr << "    <-MaxUpdt n>           Maximum update of the velocity fields (default=0.5 voxels)\n";
  cerr << "    <-lambdaX n>           Value of lambdaX (default=1)\n";
  cerr << "  \n";
  
  exit(1);
}

int main(int argc, char **argv){
  HighlyConstrainedDemons DefDemons;
  bool ok;
  int tmp,i;
  char TempChars[256];
  FILE *fichdata;
  
  // Check command line
  if (argc < 3) {
    usage();
  }
  
  // Read the name of input and output images
  strcpy(DefDemons.MovingImFile,argv[1]);
  argc--;  argv++;
  strcpy(DefDemons.FixedImFile,argv[1]);
  argc--;  argv++;
  strcpy(TempChars,argv[1]);
  argc--;  argv++;
  
  //load the name of the reference velocity fields
  fichdata = fopen (TempChars, "r" );
  fseek(fichdata,0,SEEK_SET);
  DefDemons.Ref_VF_nb=0;
  
  cout << "Files containing the reference velocity fields:" << endl;
  while(!feof(fichdata)){
    fscanf (fichdata, "%s", DefDemons.File_Ref_VF_X[DefDemons.Ref_VF_nb]);
    fscanf (fichdata, "%s", DefDemons.File_Ref_VF_Y[DefDemons.Ref_VF_nb]);
    fscanf (fichdata, "%s", DefDemons.File_Ref_VF_Z[DefDemons.Ref_VF_nb]);
    
    //cout << DefDemons.File_Ref_VF_X[DefDemons.Ref_VF_nb] << " " << DefDemons.File_Ref_VF_Y[DefDemons.Ref_VF_nb] << " "  << DefDemons.File_Ref_VF_Z[DefDemons.Ref_VF_nb] << endl;
    DefDemons.Ref_VF_nb++;
    if (DefDemons.Ref_VF_nb==99){
      cerr << "A maximum amount of 100 reference velocity fields can be considered and this maximum is reached" << endl;
      DefDemons.Ref_VF_nb=98;
      }
    }
    DefDemons.Ref_VF_nb--;
  
  // Parse remaining parameters
  while (argc > 1) {
    //1 - Primary options
    ok = false;
    if ((ok == false) && (strcmp(argv[1], "-iterations") == 0)) {
      argc--; argv++;
      DefDemons.iteration_nb = atoi(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-MaxUpdt") == 0)) {
      argc--; argv++;
      DefDemons.MaxUpdateAllowed = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-lambdaX") == 0)) {
      argc--; argv++;
      DefDemons.lambdaX = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-MI") == 0)) {
      argc--; argv++;
      DefDemons.IndicatorMI = 1;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-LASSO") == 0)) {
      argc--; argv++;
      DefDemons.LassoLevel = atof(argv[1]);
      argc--; argv++;
      DefDemons.IndicatorLASSO = 1;
      ok = true;
    }
    //2 - Inputs and Outputs
    if ((ok == false) && (strcmp(argv[1], "-PrefixInputs") == 0)) {
      argc--; argv++;
      strcpy(DefDemons.PrefixInputs,argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-PrefixOutputs") == 0)) {
      argc--; argv++;
      strcpy(DefDemons.PrefixOutputs,argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-Mask") == 0)) {
      DefDemons.IndicatorMask=1;
      argc--; argv++;
      strcpy(DefDemons.MaskFile,argv[1]);
      argc--; argv++;
      ok = true;
    }
    
    
    if ((ok == false) && (strcmp(argv[1], "-affineT_txt") == 0)) {
      argc--; argv++;
      strcpy(TempChars,argv[1]);
      argc--; argv++;
      
      Read_quat4t4mat(TempChars,DefDemons.World_FixedIm2MovingIm);
      DefDemons.World_FixedIm2MovingIm[3][0]=0;
      DefDemons.World_FixedIm2MovingIm[3][1]=0;
      DefDemons.World_FixedIm2MovingIm[3][2]=0;
      DefDemons.World_FixedIm2MovingIm[3][3]=1;
      
      ok = true;
    }

    //3 - Secondary options
    if ((ok == false) && (strcmp(argv[1], "-IniDispF") == 0)) {
      argc--; argv++;
      strcpy(DefDemons.IniDispFieldX,argv[1]);
      argc--; argv++;
      strcpy(DefDemons.IniDispFieldY,argv[1]);
      argc--; argv++;
      strcpy(DefDemons.IniDispFieldZ,argv[1]);
      argc--; argv++;
      DefDemons.IniDispFieldDefined=1;
      ok = true;
    }
    
    if (ok == false) usage();
  }
  
  
  //run process
  cout << "Registration go"<< endl;
  DefDemons.Run();
  cout << "done" << endl;
  
  return 0;
}
