/*=========================================================================
 
 Date      : $Date: 14.02.2014$
 Changes   : $Authors: Laurent Risser, Francois-Xavier Vialard$
 
 =========================================================================*/

#include <LDDMM_Splines.h>

void usage(){
  cerr << "\n";
  cerr << "\n";
  cerr << "Usage: uTIlzReg_LDDMM_Splines_LearnM [TemplateFile][ListTargetFiles] [LrnItNb][LrnMF_MatchFo][LrnMF_RegulFo] [PrefixOutput] <options>\n";
  cerr << "\n";
  cerr << "Where\n";
  cerr << " * [LrnItNb] is the number of learning iterations (typical value = 20  --  must be >0)\n";
  cerr << " * [LrnMF_MatchFo] is a mult factor for the maching forces (typical value = 0.05  -- must be in ]0,1[)\n";
  cerr << " * [LrnMF_RegulFo] is a mult factor for the regularization forces (typical value = 0.3  -- must be in ]0,1[)\n";
  cerr << " * <options> are related to the LDM registrations. They are one or more of the following:\n";
  cerr << "     Primary options:\n";
  cerr << "       <-LDM_iterations n>      Number of iterations (default=10)\n";
  cerr << "       <-LDM_subdivisions n>    Number of subdivisons (default=7)\n";
  cerr << "       <-LDM_VFmultFactor n>    Factor multiplying the estimated velocity field at each iteration (default=0.98) \n";
  cerr << "     Kernel and learning grid:\n";
  cerr << "       <-Gauss S>             Std dev of the Gaussian Kernel in millimeters   (default=8)\n";
  cerr << "       <-GrdStep n>           Grid step of M and N in voxels   (default=8)\n";
  cerr << "\n";
  
  exit(1);
}

int main(int argc, char **argv){
  bool ok;
  int i,j;
  LDDMM_Splines * LargeDef;
  SquareMatrix matrix_M;
  SquareMatrix matrix_N;
  SquareMatrix MatchingForces;
  SquareMatrix tempMat;
  SquareMatrix tempMat2;
  SquareMatrix tempMat3;
  char Template_FileName[256];
  char TargetImages_FileName[256];
  int Lrn_IteNb;
  float Lrn_MultFactorRegulF;
  float Lrn_MultFactorMatchF;
  int LDM_iterations;
  int LDM_subdivisions;
  float LDM_VFmultFactor;
  char PrefixOutputs[256];
  char matrix_M_fileName[256];
  char matrix_N_fileName[256];
  float sigma;
  int GridStep;
  FILE *TargetImages_File;
  float * ListRefMaxGrads;
  float AverageRefMaxGrad,MinRefMaxGrad,MaxRefMaxGrad;
  char TargetImage_FileName[500];
  int TargetImages_Nb;
  char RegNumber[50];
  char tmpStr[50];
  VectorField tmpVF;
  VectorField tmpVF2;
  BS_GlobalConvolver dummyConvolver;
  int itNb;
  char FileNameX[256];
  char FileNameY[256];
  char FileNameZ[256];
  char ProjMo_X[256];
  char ProjMo_Y[256];
  char ProjMo_Z[256];
  float * VectorizedVF;
  float * tmpVector;
  int VectorSize;
  float MaxAbsAllFo,SumAbsAllFo,MaxAbsRegFo,SumAbsRegFo,MaxAbsMatchFo,SumAbsMatchFo,MaxAbsScaFo,SumAbsScaFo;
  float * ListMaxAbsAllFo;
  float * ListSumAbsAllFo;
  float * ListMaxAbsRegFo;
  float * ListSumAbsRegFo;
  float * ListMaxAbsMatchFo;
  float * ListSumAbsMatchFo;
  float * ListMaxAbsScaFo;
  float * ListSumAbsScaFo;
  float CoefMult_M,initCoefMult_M;
  
  //1) Init
  
  //1.1) Check command line
  if (argc < 5) {
    usage();
    return 0;
  }
  
  //1.2) read mandatory parameters
  strcpy(Template_FileName,argv[1]);
  argc--;  argv++;
  strcpy(TargetImages_FileName,argv[1]);
  argc--;  argv++;
  Lrn_IteNb = atoi(argv[1]);   
  argc--;  argv++;
  Lrn_MultFactorMatchF = atof(argv[1]);
  argc--;  argv++;
  Lrn_MultFactorRegulF = atof(argv[1]);
  argc--;  argv++;
  strcpy(PrefixOutputs,argv[1]);
  argc--;  argv++;
  
  //1.3) set default values for the remaining parameters
  LDM_iterations=10;
  LDM_subdivisions=7;
  LDM_VFmultFactor=0.98;
  sigma=8;
  GridStep=8;

  //1.4) Parse remaining parameters
  while (argc > 1) {
    ok = false;
    if ((ok==false)&&(strcmp(argv[1],"-LDM_iterations")==0)){    argc--; argv++; LDM_iterations = atoi(argv[1]);     argc--; argv++; ok=true;}
    if ((ok==false)&&(strcmp(argv[1],"-LDM_subdivisions")==0)){  argc--; argv++; LDM_subdivisions = atoi(argv[1]);   argc--; argv++; ok=true;}
    if ((ok==false)&&(strcmp(argv[1],"-LDM_VFmultFactor")==0)){  argc--; argv++; LDM_VFmultFactor = atof(argv[1]);   argc--; argv++; ok=true;}
    if ((ok==false)&&(strcmp(argv[1],"-Gauss")==0)){             argc--; argv++; sigma = atof(argv[1]);              argc--; argv++; ok=true;}
    if ((ok==false)&&(strcmp(argv[1],"-GrdStep")==0)){           argc--; argv++; GridStep = atoi(argv[1]);           argc--; argv++; ok=true;}
    if (ok == false) usage();
  }
  
  //1.5) Allocate memory for the convergence lists
  ListMaxAbsAllFo = new float [Lrn_IteNb];
  ListSumAbsAllFo = new float [Lrn_IteNb];
  ListMaxAbsRegFo = new float [Lrn_IteNb];
  ListSumAbsRegFo = new float [Lrn_IteNb];
  ListMaxAbsMatchFo = new float [Lrn_IteNb];
  ListSumAbsMatchFo = new float [Lrn_IteNb];
  
  
  //2) Initiate M and set all classes
  
  //2.1) initiate M, N and the forces
  tmpVF.Read(Template_FileName,Template_FileName,Template_FileName);
  
  strcpy(matrix_M_fileName,PrefixOutputs);
  strcpy(tmpStr,"_M.csv");
  strcat(matrix_M_fileName,tmpStr);
  cout << "Init " << matrix_M_fileName << ":" << endl;
  dummyConvolver.WriteTemplateNodesWeighterIdMat(&tmpVF,GridStep,matrix_M_fileName);
  matrix_M.Read(matrix_M_fileName);
  
  strcpy(matrix_N_fileName,PrefixOutputs);
  strcpy(tmpStr,"_N.csv");
  strcat(matrix_N_fileName,tmpStr);
  cout << "Init " << matrix_N_fileName << ":" << endl;
  dummyConvolver.WriteTemplateNodesWeighterIdMat(&tmpVF,GridStep,matrix_N_fileName);
  matrix_N.Read(matrix_N_fileName);
  
  MatchingForces.Read(matrix_N_fileName);
  MatchingForces.SetToZero();
  
  tempMat.Read(matrix_N_fileName);
  tempMat.SetToZero();
  
  tempMat2.Read(matrix_N_fileName);
  tempMat2.SetToZero();
  
  tempMat3.Read(matrix_N_fileName);
  tempMat3.SetToZero();

  
  //2.2) count the number of reference target images to learn the metric
  TargetImages_File=fopen(TargetImages_FileName,"r");
  
  fseek(TargetImages_File,0,SEEK_SET);
  TargetImages_Nb=0;
  
  while(!feof(TargetImages_File)){
    fscanf(TargetImages_File,"%s\n",TargetImage_FileName);
    TargetImages_Nb++;
  }
  
  
  //2.3) allocate the classes for each registration and fill their parameters
  LargeDef = new LDDMM_Splines [TargetImages_Nb];
  
  ListRefMaxGrads = new float  [TargetImages_Nb];

  fseek(TargetImages_File,0,SEEK_SET);
  i=-1;
  
  
  cout << "Images registered to learn the metric: " << endl;
  
  while(!feof(TargetImages_File)){
    //2.3.1) get file name and registration id
    fscanf(TargetImages_File,"%s\n",TargetImage_FileName);
    i++;
    
    //2.3.2) set parameters for registration i
    sprintf(RegNumber, "%04d", i);
    strcpy(tmpStr,"_");
    strcpy(LargeDef[i].PrefixOutputs,PrefixOutputs);
    strcat(LargeDef[i].PrefixOutputs,tmpStr);
    strcat(LargeDef[i].PrefixOutputs,RegNumber);
    strcat(LargeDef[i].PrefixOutputs,tmpStr);
    
    LargeDef[i].NbChannels=0;
    strcpy(LargeDef[i].SourceFiles[LargeDef[i].NbChannels],Template_FileName);
    strcpy(LargeDef[i].TargetFiles[LargeDef[i].NbChannels],TargetImage_FileName);
    LargeDef[i].NbChannels++;
    
    LargeDef[i].iteration_nb=LDM_iterations;
    LargeDef[i].NbTimeSubdiv=LDM_subdivisions;
    LargeDef[i].MaxVelocityUpdate=0.49;
    LargeDef[i].sigmaX1 = sigma;
    LargeDef[i].sigmaY1 = sigma;
    LargeDef[i].sigmaZ1 = sigma;
    LargeDef[i].weight1=1;
    LargeDef[i].NbKernels=1;
    LargeDef[i].GridStep=GridStep;
    LargeDef[i].Importing_M=2;
    LargeDef[i].RefMatrixM=&matrix_M;
    LargeDef[i].VFmultFactor=LDM_VFmultFactor;
    LargeDef[i].RefMaxGrad =-1;
    LargeDef[i].UpdtMultFactor=-1; //warning: convergence is not properly managed if >0
    LargeDef[i].FinalDefVec=0;
    LargeDef[i].Output_VelocityField=0;
    LargeDef[i].Output_ProjMomentum=1;
    LargeDef[i].Output_Deformation=0;
    LargeDef[i].FlowLength=0;
    LargeDef[i].DetJacobian=0;
    LargeDef[i].FinalDefInvVec=0;
    
    cout << LargeDef[i].PrefixOutputs  << "  -->  " << LargeDef[i].SourceFiles[0] << " <-> " << LargeDef[i].TargetFiles[0] << endl;
  }
  
  
  //3) Learn M 
  for (itNb=0;itNb<Lrn_IteNb;itNb++){ //loop on the learning iterations
    
    cout << endl << "Learning iteration " << itNb+1 << " -- " << "GO" << endl;

    //3.1) save current state to measure later the influence of the forces ...
    tempMat.Copy(&matrix_N);   // ... normalization, then regularization forces (later), then matching forces (later)
    tempMat2.Copy(&matrix_N);   // ... all forces + normalization

    
    //3.2) Normalize M
    
    //3.2.1) check the average RefMaxGrad without scaling of M
    AverageRefMaxGrad=0;
    for (i=0;i<TargetImages_Nb;i++){ 
      LargeDef[i].RefMaxGrad=-1;  //makes sure RefMaxGrad is automatically tuned
      AverageRefMaxGrad+=LargeDef[i].ReturnRefMaxGrad()/static_cast<float>(TargetImages_Nb);
    }
    
    //3.2.2) scale M and N so that the average RefMaxGrad is stable at all iterations
    CoefMult_M=static_cast<float>(100)/AverageRefMaxGrad;
    
    if (itNb==0) initCoefMult_M=CoefMult_M;
    
    cout << "Learning iteration " << itNb+1 << " -- coef Mult for M = " << CoefMult_M << endl;
    
    matrix_M.Mult(CoefMult_M);
    matrix_N.Mult(sqrt(CoefMult_M));
    
    //3.3.2) measure the  influence of the regularisation Forces and save current state to measure the influence of the matching forces
    tempMat.WeightedSum(1,&matrix_N,-1);
    MaxAbsScaFo=tempMat.MaxAbsValue();    SumAbsScaFo=tempMat.SumAbsValues();
    tempMat.Copy(&matrix_N);

    
    //3.3) Update N and M with the regularization forces
    cout << "Learning iteration " << itNb+1 << " -- " << "Compute the regularisation forces and update N and M" << endl;
    
    //3.3.1) regularize

    //N = N - Lrn_MultFactorRegulF * RegularisationForces   , where  RegularisationForces = (N - normalized(Id))
    
    matrix_N.WeightedSumWithId((1-Lrn_MultFactorRegulF),Lrn_MultFactorRegulF*sqrt(initCoefMult_M));
    
    matrix_M.Copy(&matrix_N);
    matrix_M.Transpose();
    matrix_M.Mult(&matrix_N);
    
    //3.3.2) measure the  influence of the regularisation Forces and save current state to measure the influence of the matching forces
    tempMat.WeightedSum(1,&matrix_N,-1);
    MaxAbsRegFo=tempMat.MaxAbsValue();    SumAbsRegFo=tempMat.SumAbsValues();
    tempMat.Copy(&matrix_N);
    
    //3.4) Update N with the matching forces
    
    //3.4.1) check the average RefMaxGrad after scaling of M
    AverageRefMaxGrad=0;
    for (i=0;i<TargetImages_Nb;i++){
      ListRefMaxGrads[i]=LargeDef[i].ReturnRefMaxGrad();
      AverageRefMaxGrad+=ListRefMaxGrads[i]/static_cast<float>(TargetImages_Nb);
      if (i==0) cout << "Learning iteration " << itNb+1 << " -- Expected RefMaxGrads: " << ListRefMaxGrads[i];
      else cout << "  " << ListRefMaxGrads[i];
    }
    cout << endl << "Learning iteration " << itNb+1 << " -- Average RefMaxGrad: "  << AverageRefMaxGrad << endl;
    
    
    //3.4.2) run the registrations
    for (i=0;i<TargetImages_Nb;i++){ 
      LargeDef[i].RefMaxGrad=AverageRefMaxGrad; //all smoothing kernels are then the same at each iteration
      cout << "Learning iteration " << itNb+1 << " -- registration " << i+1 << endl;
      LargeDef[i].Run();
    }
    
    
    //3.4.3) Compute matching forces
    cout << "Learning iteration " << itNb+1 << " -- " << "Compute the matching forces" << endl;
    
    MatchingForces.SetToZero();
    
    for (i=0;i<TargetImages_Nb;i++){
      //3.4.3.1) load momenta at convergence
      strcpy(FileNameX,LargeDef[i].PrefixOutputs);
      strcpy(ProjMo_X,"_ProjMomentum_X.nii");
      strcat(FileNameX,ProjMo_X);
      
      strcpy(FileNameY,LargeDef[i].PrefixOutputs);
      strcpy(ProjMo_Y,"_ProjMomentum_Y.nii");
      strcat(FileNameY,ProjMo_Y);
      
      strcpy(FileNameZ,LargeDef[i].PrefixOutputs);
      strcpy(ProjMo_Z,"_ProjMomentum_Z.nii");
      strcat(FileNameZ,ProjMo_Z);

      tmpVF.Read(FileNameX,FileNameY,FileNameZ);
      tmpVF2.CreateVoidField(tmpVF.NX,tmpVF.NY,tmpVF.NZ,1,0);
      tmpVF2.ProjectTimeDepVF_to_StationaryVF(&tmpVF);
      
      VectorizedVF=tmpVF2.CopyByRefVectorizedVF(&VectorSize);
      
      //3.4.3.2) compute matching forces
      
      if ((itNb==0)&&(i==0)) tmpVector = new float [VectorSize];
      
      for (j=0;j<VectorSize;j++) tmpVector[j]=VectorizedVF[j];
      
      matrix_N.Mult(tmpVector);  //the matrix/vector product (matrix_N.tmpVector) is returned in tmpVector  
      tempMat3.PutOuterProduct(tmpVector,VectorizedVF);
      tempMat3.symmetrize();
      MatchingForces.Add(&tempMat3); 
    }
    
    MatchingForces.Mult( (-static_cast<float>(1)/static_cast<float>(TargetImages_Nb)) );
    
    
    //3.4.4) Update N and M with the matching forces...
    cout << "Learning iteration " << itNb+1 << " -- " << "Update N and M with the matching forces" << endl;
    
    //...adapt MultFactorMatchF to the considered data
    if (itNb==0) Lrn_MultFactorMatchF=Lrn_MultFactorMatchF*matrix_N.SumAbsValues()/MatchingForces.SumAbsValues();
    
    //...update N
    matrix_N.WeightedSum(1,&MatchingForces,-Lrn_MultFactorMatchF);   //N = N - Lrn_MultFactorMatchF * MatchingForces

    //...update M
    matrix_M.Copy(&matrix_N);
    matrix_M.Transpose();
    matrix_M.Mult(&matrix_N);
    
    
    //3.4.5) measure the evolution
    tempMat.WeightedSum(1,&matrix_N,-1);
    MaxAbsMatchFo=tempMat.MaxAbsValue();    SumAbsMatchFo=tempMat.SumAbsValues();
    
    tempMat2.WeightedSum(1,&matrix_N,-1);
    MaxAbsAllFo=tempMat2.MaxAbsValue();   SumAbsAllFo=tempMat2.SumAbsValues();

    
    
    //3.5) save current results

    cout << "Learning iteration " << itNb+1 << " -- " << "Save current M and N" << endl;
    matrix_M.Write(matrix_M_fileName);
    matrix_N.Write(matrix_N_fileName);
    
    cout << "Learning iteration " << itNb+1 << " -- " << "Convergence:";
    cout << " MaxAbsAllFo=" << MaxAbsAllFo;
    cout << " , SumAbsAllFo=" << SumAbsAllFo;
    cout << " , MaxAbsRegFo=" << MaxAbsRegFo;
    cout << " , SumAbsRegFo=" << SumAbsRegFo;
    cout << " , MaxAbsMatchFo=" << MaxAbsMatchFo;
    cout << " , SumAbsMatchFo=" << SumAbsMatchFo;
    cout << " , MaxAbsScaFo=" << MaxAbsScaFo;
    cout << " , SumAbsScaFo=" << SumAbsScaFo << endl;
    
    ListMaxAbsAllFo[itNb]=MaxAbsAllFo;
    ListSumAbsAllFo[itNb]=SumAbsAllFo;
    ListMaxAbsRegFo[itNb]=MaxAbsRegFo;
    ListSumAbsRegFo[itNb]=SumAbsRegFo;
    ListMaxAbsMatchFo[itNb]=MaxAbsMatchFo;
    ListSumAbsMatchFo[itNb]=SumAbsMatchFo;
    ListMaxAbsScaFo[itNb]=MaxAbsScaFo;
    ListSumAbsScaFo[itNb]=SumAbsScaFo;
  }
  
  cout << endl << "Computations are over!!!" << endl << endl;

  //4) Python code to check convergence curves 
  
  cout << "import numpy as np" << endl;
  cout << "import matplotlib.pyplot as plt" << endl;
  cout << "EvoMaxAbsRegFo=(";   for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListMaxAbsRegFo[itNb];   if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "EvoMaxAbsMatchFo=("; for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListMaxAbsMatchFo[itNb]; if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "EvoMaxAbsScaFo=(";   for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListMaxAbsScaFo[itNb];   if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "EvoMaxAbsScaMaFo=("; for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListMaxAbsScaFo[itNb]+ListMaxAbsMatchFo[itNb];   if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "EvoMaxAbsAllFo=(";   for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListMaxAbsAllFo[itNb];   if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "EvoSumAbsRegFo=(";   for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListSumAbsRegFo[itNb];   if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "EvoSumAbsMatchFo=("; for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListSumAbsMatchFo[itNb]; if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "EvoSumAbsScaFo=(";   for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListSumAbsScaFo[itNb];   if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "EvoSumAbsScaMaFo=("; for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListSumAbsScaFo[itNb]+ListSumAbsMatchFo[itNb];   if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "EvoSumAbsAllFo=(";   for (itNb=0;itNb<Lrn_IteNb;itNb++){ cout << ListSumAbsAllFo[itNb];   if (itNb<Lrn_IteNb-1) cout << " , "; else cout << ")" << endl;}
  cout << "plt.figure(0)" << endl;
  cout << "plt.semilogy(EvoMaxAbsMatchFo,\'r--\',label=\'Matching Forces\')" << endl;
  cout << "plt.semilogy(EvoMaxAbsRegFo,\'b:\',label=\'Regularisation Forces\')" << endl;
  cout << "plt.semilogy(EvoMaxAbsScaMaFo,\'g\',label=\'Scaling+Matching Forces\')" << endl;
  cout << "legend = plt.legend(loc=\'upper right\')" << endl;
  cout << "plt.title(\'" << PrefixOutputs << ": Evolution max(abs(Forces))\')" << endl;
  cout << "plt.figure(1)" << endl;
  cout << "plt.semilogy(EvoSumAbsMatchFo,\'r--\',label=\'Matching Forces\')" << endl;
  cout << "plt.semilogy(EvoSumAbsRegFo,\'b:\',label=\'Regularisation Forces\')" << endl;
  cout << "plt.semilogy(EvoSumAbsScaMaFo,\'g\',label=\'Scaling+Matching Forces\')" << endl;
  cout << "legend = plt.legend(loc=\'upper right\')" << endl;
  cout << "plt.title(\'" << PrefixOutputs << ": Evolution sum(abs(Forces))\')" << endl;
  cout << "plt.figure(2)" << endl;
  cout << "plt.semilogy(EvoMaxAbsAllFo,\'k--\',label=\'max(abs(Forces))\')" << endl;
  cout << "plt.semilogy(EvoSumAbsAllFo,\'k:\',label=\'sum(abs(Forces))\')" << endl;
  cout << "legend = plt.legend(loc=\'upper right\')" << endl;
  cout << "plt.title(\'" << PrefixOutputs << ": Evolution All Forces\')" << endl;
  cout << "plt.show()" << endl << endl << endl;
  
  return 0;
}

