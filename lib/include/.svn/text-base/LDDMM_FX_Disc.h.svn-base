/*=========================================================================
 
 Date      : $Date: 29.04.2010$
 Changes   : $Authors: Laurent Risser, Francois-Xavier Vialard$
 
 =========================================================================*/

#ifndef _UTILZREG_DISC_LDDMM_H
#define _UTILZREG_DISC_LDDMM_H

#include <SciCalcPack.h>


/**
 * Class for Large Deformation registration using Beg 05's technique
 */

class LargeDef_LDDMM_FX_Disc{
private:
	
protected:
	/// Function to launch the default calculations
	virtual void Run_Default();
	
	
	
	/// functions to perform the registration
	virtual void AllocateAllVariables();
	virtual void ReadAndTreatInputImages();
	virtual void ComputeEnergyGradient(int,VectorField * treatedVF, float LocSigmaFluid);
	virtual void ComputeEnergyGradient_momentumKnown(int,VectorField * treatedVF,ScalarField * Momenta, float LocSigmaFluid);
	virtual float UpdateVelocityField(int,VectorField * treatedVF, float LocRefMaxGrad);
  //virtual void DiffusionLikeSmoothing();
	virtual void SaveResultGradientDescent();
	
	///functions to save and load various structures
	virtual void LoadVelocityFields(char *);
	virtual void SaveVelocityFields(VectorField *,VectorField *, char *);
	virtual void SaveDeformations(char Prefix[256]);
  
	/// Protected parameters
	//scalar and vector fields
	ScalarField ImTemplate;   //3D image
	ScalarField ImTarget;     //3D image
	ScalarField J0;           //projection of 'ImTemplate' at a time between 0 and 1
	ScalarField J1;           //projection of 'ImTarget' at a time between 0 and 1
	VectorField GradJ;
	ScalarField DetJacobians;
	VectorField ForwardMapping;
	VectorField BackwardMapping;
	VectorField VelocityField_u;
	VectorField VelocityField_w;
	VectorField GradE;
	
	//gray level changes
	float MinGrayLevel;
	float MaxGrayLevel;
	
  //Quaternion to convert target coordinates into template (=source) coordinates
  float Target2TemplateCoord[4][4];
  
	//size of the fields
	int NX;
	int NY;
	int NZ;
	int NT;
	
  //parameters related to the mask
  int NbIdInMask;
  float * IdInMask;
	VectorField FieldToSmooth;
	ScalarField ProjMask;
	ScalarField Mask;
  VectorField NearestBoundary;
  ScalarField NormalCompo;
  ScalarField TempSF;
  

public:
	
	/// Constructor
	LargeDef_LDDMM_FX_Disc();
	
	/// Destructor
	~LargeDef_LDDMM_FX_Disc();
	
	/// Run  Large Deformation registration
	virtual void Run();
	
	
	/// public Parameters
	int iteration_nb;              //number of iterations 
	float LambaX;
  int NbTimeSubdiv;              //Number of subdivision of virtual time steps
	float MaxVelocityUpdate;       //Maximum allowed velocity update at each subdivision and iteration (in voxels)
	float RefMaxGrad_u;              //Reference update gradient (typically the value of MaxGrad at the 1st iteration)
	float RefMaxGrad_w;              //Reference update gradient (typically the value of MaxGrad at the 1st iteration)
	float DeltaTimeSubdiv;         //time step between two subdivision
	int Margin;                    //Margin of the image in voxels where the calculations are reduced
	//float sigma_diffusion;
  float sigma_fluid_u;           //std. dev. of the 1st Gaussian kernel in direction x,y,z (disc)
  float sigma_fluid_w;           //std. dev. of the 1st Gaussian kernel in direction x,y,z (no disc)
	int MeasureTypicAmp;
	int GreyLevAlign;              //Grey level linear alignment of the images if !=0
	float GLA_Padding_Src;         //if grey level alignment: padding value for the source image
	float GLA_Padding_Trg;         //if grey level alignment: padding value for the target image
	float WghtVelField;            //Weight of the velocity field in the energy
	char PrefixInputs[256];        //Prefix of the files containing an initial velocity field
	char PrefixOutputs[256];       //Prefix of the files containing the final velocity field
	char SourceFile[256];         //name of the file containing the source images
	char TargetFile[256];         //name of the file containing the target images
	char MaskFile[256];            //name of the file containing the mask on the images
  float World_Target2Template[4][4]; // in the world domain, affine registration that matches the target image to the template (source) image
  float x_mm,y_mm,z_mm;   //voxel size in mm
  int NoUpdatesOfU;
  int NoUpdatesOfW;
  int BoundaMargin; //margin around the bounadrie (in voxels) in which the SmoothedField is set to zero before smoothing
  int ExtendTrgImag_LowerX;  //
  int ExtendTrgImag_UpperX;  //
  int ExtendTrgImag_LowerY;  //
  int ExtendTrgImag_UpperY;  // -> for the eventual extention of the target image (where the computations are done)
  int ExtendTrgImag_LowerZ;  //
  int ExtendTrgImag_UpperZ;  //
  float UnderSampleTrgFactor;
};


#endif
