/*=========================================================================
 
 Date      : $Date: 14.02.2014$
 Changes   : $Authors: Laurent Risser, Francois-Xavier Vialard$
 
 =========================================================================*/

#include <LDDMM_Splines.h>

void usage(){
  cerr << "Usage: uTIlzReg_LDDMM_Splines [Source] [Target] <options>\n";
  cerr << "Where <options> are one or more of the following:\n";
  cerr << "  Primary options:\n";
  cerr << "    <-iterations n>      Number of iterations (default=10)\n";
  cerr << "    <-subdivisions n>    Number of subdivisons (default=10)\n";
  cerr << "    <-MaxVeloUpdt n>     Maximum velocity update at each iteration (default=0.4 voxels)\n";
  cerr << "    <-VFmultFactor n>    Factor multiplying the estimated velocity field at each iteration (default=0.98) \n";
  cerr << "  Inputs and Outputs:\n";
  cerr << "    <-PrefixInputs n>    Prefix of the files containing an initial velocity field (default=\"Null\")\n";
  cerr << "    <-PrefixOutputs n>   Prefix of the files containing the outputs (default=\"Outputs\")\n";
  cerr << "    <-AddChannel W S T>  Add a channel -> W=weight (wgt of ref channel is 1) S=Source T=Target\n";
  cerr << "    <-affineT n>         Affine transfo from Trg to Src in the world domain. The 4*3 parameters are: r_xx r_xy r_xz t_x  r_yx ... t_z\n";
  cerr << "  Kernel and learning grid (Default: -Gauss 8  / -GrdStep_No_M 8):\n";
  cerr << "    <-Gauss S>           Std dev of the Gaussian Kernel (in millimeters)\n";
  cerr << "    <-MK_Gauss n>        Sum of 7 linearly sampled Gaussian kernels with apparent weights = 1 -- n = Smax Smin\n" ;
  cerr << "    <-GrdStep_No_M n>    Registration with matrix M.  n = [grid step size in voxels].  \n";
  cerr << "    <-GrdStep_Gen_M n>   ONLY generates an identity matrix M adapted to [Source]. n = [grid step size in voxels]. \n";
  cerr << "    <-GrdStep_Full_M n>  Registration using M. n = [grid step size in voxels] + [file containing M] \n";
  cerr << "  Secondary options:\n";
  cerr << "    <-margins n>         Margin of the image where the calculations are reduced  (default=0 voxels)\n";
  cerr << "    <-RefMaxGrad n>      Value to manage the convergence. Automatically configured if <0 (default=-1.)\n";
  cerr << "    <-UpdtMultFactor n>  Impose a multiplicatory factor on the update forces convergence if >0. (default=-1.)\n";
  cerr << "  Special Outputs:\n";
  cerr << "    <-FinalDefInvVec>    Displacement field in mm from [Target] to [Source]\n";
  cerr << "    <-AOD>               Amplitude of the deformations from each voxel of the source image\n";
  cerr << "    <-DetJacobian>       Determinant of the Jacobian at each voxel\n";
  cerr << "    <-ShowSSD>           Show the Sum of the Squared Differences at t=1 ieration after iteration\n";
  cerr << "    <-No_FinalDefVec>    No displacement field in mm from [Source] to [Target]   (saved by default)\n";
  cerr << "    <-No_Deformation>    No deformations saved (saved by default)\n";
  cerr << "    <-No_VelocityField>  No velocity field saved (saved by default)\n";
  cerr << "    <-No_ProjMomentum>  No projected momentum saved (saved by default)\n";
  cerr << "  \n";
  
  exit(1);
}

int main(int argc, char **argv){
  LDDMM_Splines LargeDef;
  bool ok;
  SquareMatrix LocRefMatrix;

  // Check command line
  if (argc < 3) {
    usage();
  }
  
  // Read the name of input and output images (= 1st channel)
  strcpy(LargeDef.SourceFiles[LargeDef.NbChannels],argv[1]);
  argc--;  argv++;
  strcpy(LargeDef.TargetFiles[LargeDef.NbChannels],argv[1]);
  argc--;  argv++;
  LargeDef.NbChannels++;
  
  // Parse remaining parameters
  while (argc > 1) {
    //1 - Primary options
    ok = false;
    if ((ok == false) && (strcmp(argv[1], "-iterations") == 0)) {
      argc--; argv++;
      LargeDef.iteration_nb = atoi(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-subdivisions") == 0)) {
      argc--; argv++;
      LargeDef.NbTimeSubdiv = atoi(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-MaxVeloUpdt") == 0)) {
      argc--; argv++;
      LargeDef.MaxVelocityUpdate = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    //2 - Inputs and Outputs
    if ((ok == false) && (strcmp(argv[1], "-PrefixInputs") == 0)) {
      argc--; argv++;
      strcpy(LargeDef.PrefixInputs,argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-PrefixOutputs") == 0)) {
      argc--; argv++;
      strcpy(LargeDef.PrefixOutputs,argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-AddChannel") == 0) && (LargeDef.NbChannels<100)) {
      argc--; argv++;
      LargeDef.weightChannel[LargeDef.NbChannels] = atof(argv[1]);
      argc--; argv++;
      strcpy(LargeDef.SourceFiles[LargeDef.NbChannels],argv[1]);
      argc--; argv++;
      strcpy(LargeDef.TargetFiles[LargeDef.NbChannels],argv[1]);
      argc--; argv++;
      LargeDef.NbChannels++;
      ok = true;
      if (LargeDef.NbChannels==100) cout << "\n \n MAXIMUM NUMBER OF 100 CHANNELS IS REACHED !!!\n \n ";
    }
    //3 - Kernels
    if ((ok == false) && (strcmp(argv[1], "-Gauss") == 0)) {
      LargeDef.weight1 = 100.;
      argc--; argv++;
      LargeDef.sigmaX1 = atof(argv[1]);
      LargeDef.sigmaY1 = atof(argv[1]);
      LargeDef.sigmaZ1 = atof(argv[1]);
      LargeDef.weight1=1;
      argc--; argv++;
      LargeDef.NbKernels=1;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-MK_Gauss") == 0)) {
      argc--; argv++;
      LargeDef.sigmaX1 = atof(argv[1]);
      LargeDef.sigmaY1 = atof(argv[1]);
      LargeDef.sigmaZ1 = atof(argv[1]);
      LargeDef.weight1=0;
      argc--; argv++;
      LargeDef.sigmaX7 = atof(argv[1]);
      LargeDef.sigmaY7 = atof(argv[1]);
      LargeDef.sigmaZ7 = atof(argv[1]);
      LargeDef.weight7=0;
      argc--; argv++;
      
      LargeDef.NbKernels=7;

      float tmpFl,a,b;
      int i;
      
      if (LargeDef.sigmaX1<LargeDef.sigmaX7){
        tmpFl=LargeDef.sigmaX1; LargeDef.sigmaX1=LargeDef.sigmaX7; LargeDef.sigmaX7=tmpFl;
        tmpFl=LargeDef.sigmaY1; LargeDef.sigmaY1=LargeDef.sigmaY7; LargeDef.sigmaY7=tmpFl;
        tmpFl=LargeDef.sigmaZ1; LargeDef.sigmaZ1=LargeDef.sigmaZ7; LargeDef.sigmaZ7=tmpFl;
      }
      
      a=(LargeDef.sigmaY7-LargeDef.sigmaY1)/6.;
      b=LargeDef.sigmaY1-a;
      
      LargeDef.sigmaX2 = a*2+b; LargeDef.sigmaY2 = a*2+b; LargeDef.sigmaZ2 = a*2+b; LargeDef.weight2=0;
      LargeDef.sigmaX3 = a*3+b; LargeDef.sigmaY3 = a*3+b; LargeDef.sigmaZ3 = a*3+b; LargeDef.weight3=0;
      LargeDef.sigmaX4 = a*4+b; LargeDef.sigmaY4 = a*4+b; LargeDef.sigmaZ4 = a*4+b; LargeDef.weight4=0;
      LargeDef.sigmaX5 = a*5+b; LargeDef.sigmaY5 = a*5+b; LargeDef.sigmaZ5 = a*5+b; LargeDef.weight5=0;
      LargeDef.sigmaX6 = a*6+b; LargeDef.sigmaY6 = a*6+b; LargeDef.sigmaZ6 = a*6+b; LargeDef.weight6=0;
      
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-GrdStep_No_M") == 0)) {
      LargeDef.Importing_M=0;
      argc--; argv++;
      LargeDef.GridStep = atoi(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-GrdStep_Gen_M") == 0)) {
      LargeDef.Importing_M=-1;
      argc--; argv++;
      LargeDef.GridStep = atoi(argv[1]);
      argc--; argv++;
      ok = true;
    }

    if ((ok == false) && (strcmp(argv[1], "-GrdStep_Full_M") == 0)) {
      /*
      LargeDef.Importing_M=1;
      argc--; argv++;
      LargeDef.GridStep = atoi(argv[1]);
      argc--; argv++;
      strcpy(LargeDef.M_File,argv[1]);
      argc--; argv++;
      ok = true;
      */
      /*                -> HACK WHICH WORKS - READY FOR EXTENSION :-) */
      argc--; argv++;
      LargeDef.GridStep = atoi(argv[1]);
      argc--; argv++;
      strcpy(LargeDef.M_File,argv[1]);
      argc--; argv++;
      ok = true;
      
      LargeDef.Importing_M=2;
      LocRefMatrix.Read(LargeDef.M_File);
      LargeDef.RefMatrixM=&LocRefMatrix;
    }
    
    if ((ok == false) && (strcmp(argv[1], "-affineT") == 0)) {
      argc--; argv++;
      LargeDef.World_Target2Template[0][0]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[0][1]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[0][2]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[0][3]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[1][0]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[1][1]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[1][2]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[1][3]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[2][0]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[2][1]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[2][2]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[2][3]=atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    
    
    //4 - Secondary options
    if ((ok == false) && (strcmp(argv[1], "-margins") == 0)) {
      argc--; argv++;
      LargeDef.Margin = atoi(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-VFmultFactor") == 0)) {
      argc--; argv++;
      LargeDef.VFmultFactor = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-RefMaxGrad") == 0)) {
      argc--; argv++;
      LargeDef.RefMaxGrad = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-UpdtMultFactor") == 0)) {
      argc--; argv++;
      LargeDef.UpdtMultFactor = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    //5) Special outputs
    if ((ok == false) && (strcmp(argv[1], "-AOD") == 0)) {
      argc--; argv++;
      LargeDef.FlowLength = 1;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-DetJacobian") == 0)) {
      argc--; argv++;
      LargeDef.DetJacobian = 1;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-No_FinalDefVec") == 0)) {
      argc--; argv++;
      LargeDef.FinalDefVec = 0;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-No_Deformation") == 0)) {
      argc--; argv++;
      LargeDef.Output_Deformation = 0;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-No_VelocityField") == 0)) {
      argc--; argv++;
      LargeDef.Output_VelocityField = 0;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-No_ProjMomentum") == 0)) {
      argc--; argv++;
      LargeDef.Output_ProjMomentum = 0;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-FinalDefInvVec") == 0)) {
      argc--; argv++;
      LargeDef.FinalDefInvVec = 1;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-ShowSSD") == 0)) {
      argc--; argv++;
      LargeDef.ShowSSD = 1;
      ok = true;
    }
    if (ok == false) usage();
  }
  
  //run process
  cout << "Large Deformation registration using splines ... \n"; cout.flush();
  LargeDef.Run();
  cout << "done" << endl;
  
  return 0;
}

