/*=========================================================================
 
 Authors: Laurent Risser, Francois-Xavier Vialard
 
 =========================================================================*/

#include <LIDM.h>

void usage(){
  cerr << "   \n";
  cerr << "Usage: uTIlzReg_LIDM [Source][Target] [PartitionOfUnity]   [N][w1][s1][w2][w2]...[wN][sN] <options>\n";
  cerr << "Where:\n";
  cerr << " [Source] is the source (template/moving) image\n";
  cerr << " [Target] is the target (fixed) image\n";
  cerr << " [PartitionOfUnity] is the partition of unity. It is a 3D+t or 3D+channels image in the [Source] domain for which each frame/channel\n";
  cerr << "   is the local influence of one region -> 0 no influence / 1 maximum influence. At each voxel, the sum of all region influence\n";
  cerr << "   is ideally 1. It will be normalized otherwise. Voxelwise sum of region influences is also ideally the same in all the image\n";
  cerr << "   domain. A background region is generated otherwise.\n";
  cerr << " [N][wn][sn] Default kernel used in all regions. [N] is the number of Gaussian kernels. [wn][sn] are the weight and std dev of\n";
  cerr << "   n'th Gaussian kernels.\n";
  cerr << "<options> are then the following:\n";
  cerr << "   Primary options:\n";
  cerr << "    <-SetRegKernel n>      Set the kernel in region [RegionID] (rem: 1st region = 0). n=([RegionID]  [N][w1][s1][w2][w2]...[wN][sN])\n";
  cerr << "    <-iterations n>        Number of iterations (default=10)\n";
  cerr << "    <-subdivisions n>      Number of subdivisons (default=10)\n";
  cerr << "    <-UnderSample n>       Undersample the images with the factor n (default n = 1)\n";
  cerr << "    <-MaxVeloUpdt n>       Maximum velocity update at each iteration (default=0.4 voxels)\n";
  cerr << "   Inputs and Outputs:\n";
  cerr << "    <-PrefixInputs n>      Prefix of the files containing an initial velocity field (default=\"Null\")\n";
  cerr << "    <-PrefixOutputs n>     Prefix of the files containing the outputs (default=\"Outputs\")\n";
  cerr << "    <-affineT n>           Affine transfo from Trg to Src in the world domain. The 4*3 parameters are: r_xx r_xy r_xz t_x  r_yx ... t_z\n";
  cerr << "   Secondary options:\n";
  cerr << "    <-margins n>           Margin of the image where the calculations are reduced  (default=0 voxels)\n";
  cerr << "    <-WghtVeloField n>     Weight of the velocity field in the energy (default=1.) \n";
  cerr << "    <-RefMaxGrad n>        Value to manage the convergence. Automatically configured if <0 (default=-1.)\n";
  cerr << "    <-epsilon n>           Threshold on the normalized max update of the velicty field (default=0.2)\n";
  cerr << "   Special Outputs:\n";
  cerr << "    <-FinalDefInvVec>      Displacement field in mm from [Target] to [Source]\n";
  cerr << "    <-InitMomentum>        Estimated initial momentum\n";
  cerr << "    <-ShowSSD>             Show the Sum of the Squared Differences at t=1 ieration after iteration\n";
  cerr << "   \n";
  
  exit(1);
}

int main(int argc, char **argv){
  LIDM LargeDef;
  bool ok;
  int tmpInt,tmpInt2,region,kernelID;
  ScalarField POUtmp;
  
  // Check command line
  if (argc < 3) {
    usage();
  }
  
  //1) Read the name of input and output images
  strcpy(LargeDef.SourceFile,argv[1]);
  argc--;  argv++;
  strcpy(LargeDef.TargetFile,argv[1]);
  argc--;  argv++;
  strcpy(LargeDef.PartiOfUnityFile,argv[1]);
  argc--;  argv++;
  
  //2) read the partition of unity and default kernel
  POUtmp.Read(LargeDef.PartiOfUnityFile);
  tmpInt=POUtmp.NT+2;
  POUtmp.SlashFieldSize(0);
  
  LargeDef.weight = new float* [tmpInt];
  LargeDef.stdDev = new float* [tmpInt];
  
  for (region=0;region<tmpInt;region++){
    LargeDef.weight[region]  = new float [7];
    LargeDef.stdDev[region]  = new float [7];
  }
  
  for (region=0;region<tmpInt;region++) for (kernelID=0;kernelID<7;kernelID++){ //default values of the kernel (in case no kernel is manually defined)
    LargeDef.stdDev[region][kernelID]=1;
    if (kernelID==0)
      LargeDef.weight[region][kernelID]=1;
    else
      LargeDef.weight[region][kernelID]=0.0001;
  }
  
  
  tmpInt2 = atoi(argv[1]);
  argc--;  argv++;
 
  for (kernelID=0;kernelID<tmpInt2;kernelID++){ //entered values of the kernel
    
    LargeDef.weight[0][kernelID] = atof(argv[1]);
    argc--;  argv++;
    LargeDef.stdDev[0][kernelID] = atof(argv[1]);
    argc--;  argv++;
    
    for (region=1;region<tmpInt;region++){
      LargeDef.weight[region][kernelID]=LargeDef.weight[0][kernelID];
      LargeDef.stdDev[region][kernelID]=LargeDef.weight[0][kernelID];
    }
  }
  
  //3) Parse remaining parameters
  while (argc > 1) {
    //1 - Primary options
    ok = false;
    if ((ok == false) && (strcmp(argv[1], "-iterations") == 0)) {
      argc--; argv++;
      LargeDef.iteration_nb = atoi(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-subdivisions") == 0)) {
      argc--; argv++;
      LargeDef.NbTimeSubdiv = atoi(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-UnderSample") == 0)) {
      argc--; argv++;
      LargeDef.UnderSampleFactor = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-MaxVeloUpdt") == 0)) {
      argc--; argv++;
      LargeDef.MaxVelocityUpdate = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-SetRegKernel") == 0)) {
      argc--; argv++;
      tmpInt = atoi(argv[1]);  // region ID
      argc--; argv++;
      tmpInt2 = atoi(argv[1]);  // nb of kernel
      argc--; argv++;
      for (kernelID=0;kernelID<7;kernelID++){
        LargeDef.weight[tmpInt][kernelID] = 0.0001;
        LargeDef.stdDev[tmpInt][kernelID] = 1;
      }
      for (kernelID=0;kernelID<tmpInt2;kernelID++){
        LargeDef.weight[tmpInt][kernelID] = atof(argv[1]);
        argc--;  argv++;
        LargeDef.stdDev[tmpInt][kernelID] = atof(argv[1]);
        argc--;  argv++;
      }
      ok = true;
    }
    //2 - Inputs and Outputs
    if ((ok == false) && (strcmp(argv[1], "-PrefixInputs") == 0)) {
      argc--; argv++;
      strcpy(LargeDef.PrefixInputs,argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-PrefixOutputs") == 0)) {
      argc--; argv++;
      strcpy(LargeDef.PrefixOutputs,argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-affineT") == 0)) {
      argc--; argv++;
      LargeDef.World_Target2Template[0][0]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[0][1]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[0][2]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[0][3]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[1][0]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[1][1]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[1][2]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[1][3]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[2][0]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[2][1]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[2][2]=atof(argv[1]);
      argc--; argv++;
      LargeDef.World_Target2Template[2][3]=atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    
    
    //4 - Secondary options
    if ((ok == false) && (strcmp(argv[1], "-margins") == 0)) {
      argc--; argv++;
      LargeDef.Margin = atoi(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-WghtVeloField") == 0)) {
      argc--; argv++;
      LargeDef.WghtVelField = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-RefMaxGrad") == 0)) {
      argc--; argv++;
      LargeDef.RefMaxGrad = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-epsilon") == 0)) {
      argc--; argv++;
      LargeDef.epsilon = atof(argv[1]);
      argc--; argv++;
      ok = true;
    }
    //5) Special outputs
    if ((ok == false) && (strcmp(argv[1], "-InitMomentum") == 0)) {
      argc--; argv++;
      LargeDef.CptInitMomentum = 1;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-FinalDefInvVec") == 0)) {
      argc--; argv++;
      LargeDef.FinalDefInvVec = 1;
      ok = true;
    }
    if ((ok == false) && (strcmp(argv[1], "-ShowSSD") == 0)) {
      argc--; argv++;
      LargeDef.ShowSSD = 1;
      ok = true;
    }
    if (ok == false) usage();
  }
  
  
  //run process
  cout << "Large Deformation registration using LIDM ... \n"; cout.flush();
  LargeDef.Run();
  cout << "done" << endl;
  
  return 0;
}
