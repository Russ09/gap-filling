/*=========================================================================
 
 
 Author: Laurent Risser, Francois-Xavier Vialard
 
 Disclaimer: This software has been developed for research purposes only, and hence should 
 not be used as a diagnostic tool. In no event shall the authors or distributors
 be liable to any direct, indirect, special, incidental, or consequential 
 damages arising of the use of this software, its documentation, or any 
 derivatives thereof, even if the authors have been advised of the possibility 
 of such damage. 
 
 
 =========================================================================*/

#ifndef _LDM_METAMORPHOSIS_H
#define _LDM_METAMORPHOSIS_H

#include <SciCalcPack.h>


/**
 * Class for Large Deformation registration using Beg 05's technique
 */

class LDM_Metamorphosis{
private:
  
protected:
  /// Function to launch the default calculations
  virtual void Run_Default();
  
  /// Measure of the inverse typical amplitude of the deformations
  virtual float Run_MeasureTypicalAmplitude();
  
  
  /// functions to perform the registration
  virtual void AllocateAllVariables();
  virtual void ReadAndTreatInputImages();
  virtual void ComputeEnergyGradient(int,int);
  virtual void UpdateVelocityField(int);
  virtual void SaveResultGradientDescent();
  
  ///functions to save and load various structures
  virtual void LoadVelocityFields(char *);
  virtual void SaveVelocityFields(VectorField *, char *);
  virtual void SaveDeformations(char *);
  virtual void SaveFlowLength(VectorField *,VectorField *,char *,char *);
  virtual void SaveEvoFlowLength(VectorField *,VectorField *,char *,char *);
  virtual void SaveVecDeformation(char *);
  virtual void SaveInvVecDeformation(char *);
  virtual void SaveGlobalFlowLength(char *);
  virtual void SaveDetJacobian(char *);
  
  /// Protected parameters
  //scalar and vector fields
  ScalarField ImTemplate;   //3D image
  ScalarField ImTarget;     //3D image
  ScalarField J0;           //projection of 'ImTemplate' at a time between 0 and 1
  ScalarField J1;           //projection of 'ImTarget' at a time between 0 and 1
  ScalarField ImEvo;        //evolution of the image
  ScalarField GradImEvo;
  ScalarField InitialMomentum;
  ScalarField TempImage;
  ScalarField GradInitialMomentum;
  VectorField GradJ;
  ScalarField DetJacobians;
  VectorField ForwardMapping;
  VectorField BackwardMapping;
  VectorField Tmp3DMapping;
  VectorField VelocityField;
  VectorField GradE;
  
  
  
  //gray level changes
  float MinGrayLevel;
  float MaxGrayLevel;
  
  
  //size of the fields
  int NX;
  int NY;
  int NZ;
  int NT;
  
  //fft convolver (to smooth the images)
  FFTconvolver3D FFTconvolver;
  
public:
  
  /// Constructor
  LDM_Metamorphosis();
  
  /// Destructor
  ~LDM_Metamorphosis();
  
  /// Run  Large Deformation registration
  virtual void Run();
  
  
  /// public Parameters
  int iteration_nb;              //number of iterations 
  float epsilon;                 //Threshold on the energy gradient convergence
  int NbTimeSubdiv;              //Number of subdivision of virtual time steps
  float MaxVelocityUpdate;       //Maximum allowed velocity update at each subdivision and iteration (in voxels)
  float Max_GL_Update;       //Maximum allowed velocity update at each subdivision and iteration (in voxels)
  float RefMaxGrad;              //Reference update gradient (typically the value of MaxGrad at the 1st iteration)
  float Ref_GL_Grad;          //Reference update grey level gradient (typically the value of MaxGrad at the 1st iteration)
  float DeltaTimeSubdiv;         //time step between two subdivision
  int Margin;                    //Margin of the image in voxels where the calculations are reduced
  float weight1,sigmaX1,sigmaY1,sigmaZ1; //std. dev. of the 1st Gaussian kernel in direction x,y,z
  float weight2,sigmaX2,sigmaY2,sigmaZ2; //std. dev. of the 2nd Gaussian kernel in direction x,y,z (only used if >0)
  float weight3,sigmaX3,sigmaY3,sigmaZ3; //std. dev. of the 3rd Gaussian kernel in direction x,y,z (only used if >0)
  float weight4,sigmaX4,sigmaY4,sigmaZ4; //std. dev. of the 4th Gaussian kernel in direction x,y,z (only used if >0)
  float weight5,sigmaX5,sigmaY5,sigmaZ5; //std. dev. of the 5th Gaussian kernel in direction x,y,z (only used if >0)
  float weight6,sigmaX6,sigmaY6,sigmaZ6; //std. dev. of the 6th Gaussian kernel in direction x,y,z (only used if >0)
  float weight7,sigmaX7,sigmaY7,sigmaZ7; //std. dev. of the 7th Gaussian kernel in direction x,y,z (only used if >0)
  int TranslatEstim;
  int MeasureTypicAmp;
  int GreyLevAlign;              //Grey level linear alignment of each channel if !=0
  float GLA_Padding_Src;         //if grey level alignment: padding value for the source image
  float GLA_Padding_Trg;         //if grey level alignment: padding value for the target image
  float WghtVelField;            //Weight of the velocity field in the energy
  int FlowLength;                //Save Length of the deformation flow from each voxel if .==1
  int DetJacobian;               //Save Determinant of the Jacobian at each voxel if .==1
  int FinalDefVec;               //Save Vector field of the estimated deformation from [Source] to [Target] if .==1
  int FinalDefInvVec;            //Save Vector field of the estimated deformation from [Target] to [Source] if .==1
  char PrefixInputs[256];        //Prefix of the files containing an initial velocity field
  char PrefixOutputs[256];       //Prefix of the files containing the final velocity field
  char SourceFile[256];     //name of the file containing the source images
  char TargetFile[256];     //name of the file containing the target images
  char MaskFile[256];            //name of the file containing the mask on the images
  float World_Target2Template[4][4]; // in the world domain, affine registration that matches the target image to the template (source) image
  float Template2TargetCoord[4][4];  //Quaternion to convert target coordinates into template (=source) coordinates
  float x_mm,y_mm,z_mm;              //voxel size in mm
  float lambda;                      //weight on the updates in the \Nabla_v(U)
  float CharacScaleUpdates;         // scaling factor to set the first velocity update to about 1
};


#endif
